{
  "hash": "183b113da0472f5607b367e52ff35c79",
  "result": {
    "markdown": "---\ntitle: odata demo\nformat:\n  html:\n    code-fold: true\n---\n\n# Data catalogue API with OData interface\n\n## Query structure\n\nAs a general note, OData query consists of elements which in this documentation are called \"options\". Interface supports the following search options:\n\n* filter\n* orderby\n* top\n* skip\n* count\n* expand\n\nSearch options should always be preceded with *$* and consecutive options should be separated with *&*.\n\nConsecutive filters within *filter* option should be separated with *and* or *or*. *Not* operator can also be used e.g.:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=not contains(Name,'S2') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T00:10:00.000Z&$orderby=ContentDate/Start&$top=100`](<https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=not%20contains(Name,%27S2%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T00:10:00.000Z&$orderby=ContentDate/Start&$top=100>)\n\n<u>Performance note</u>:\n\nTo accelerate the query performance it is recommended to limit the query by acquisition dates e.g.:\n```\nContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z\n```\n## Filter option\n\n### Query by name\n\nTo search for a specific product by its exact name:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Name eq 'S1A_IW_GRDH_1SDV_20141031T161924_20141031T161949_003076_003856_634E.SAFE'`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Name%20eq%20%27S1A_IW_GRDH_1SDV_20141031T161924_20141031T161949_003076_003856_634E.SAFE')\n\nTo search for products containing \"S1A\" in their names:\n\n::: {.panel-tabset}\n\n# HTTP Request\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,'S1A') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-21T00:00:00.000Z)\n\n# Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport requests\nimport pandas as pd\njson = requests.get(\"https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,'S1A') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z\").json()\npd.DataFrame.from_dict(json['value']).head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>@odata.mediaContentType</th>\n      <th>Id</th>\n      <th>Name</th>\n      <th>ContentType</th>\n      <th>ContentLength</th>\n      <th>OriginDate</th>\n      <th>PublicationDate</th>\n      <th>ModificationDate</th>\n      <th>Online</th>\n      <th>EvictionDate</th>\n      <th>S3Path</th>\n      <th>Checksum</th>\n      <th>ContentDate</th>\n      <th>Footprint</th>\n      <th>GeoFootprint</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>application/octet-stream</td>\n      <td>cf59a73f-9069-5207-baf4-d109f8c25dca</td>\n      <td>S1A_IW_RAW__0SDV_20220503T052000_20220503T0520...</td>\n      <td>application/octet-stream</td>\n      <td>0</td>\n      <td>2022-05-03T06:12:05.932Z</td>\n      <td>2022-05-03T06:19:56.759Z</td>\n      <td>2022-05-03T06:19:56.759Z</td>\n      <td>True</td>\n      <td></td>\n      <td>/eodata/Sentinel-1/SAR/RAW/2022/05/03/S1A_IW_R...</td>\n      <td>[]</td>\n      <td>{'Start': '2022-05-03T05:20:00.392Z', 'End': '...</td>\n      <td>geography'SRID=4326;POLYGON ((10.5421 43.5324,...</td>\n      <td>{'type': 'Polygon', 'coordinates': [[[10.5421,...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>application/octet-stream</td>\n      <td>693b32c5-2aff-508b-9678-a15446d65e78</td>\n      <td>S1A_IW_RAW__0SDV_20220503T035105_20220503T0351...</td>\n      <td>application/octet-stream</td>\n      <td>0</td>\n      <td>2022-05-03T06:14:12.376Z</td>\n      <td>2022-05-03T06:24:03.663Z</td>\n      <td>2022-05-03T06:24:03.663Z</td>\n      <td>True</td>\n      <td></td>\n      <td>/eodata/Sentinel-1/SAR/RAW/2022/05/03/S1A_IW_R...</td>\n      <td>[]</td>\n      <td>{'Start': '2022-05-03T03:51:05.177Z', 'End': '...</td>\n      <td>geography'SRID=4326;POLYGON ((28.1764 7.936, 2...</td>\n      <td>{'type': 'Polygon', 'coordinates': [[[28.1764,...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>application/octet-stream</td>\n      <td>b9340863-9ac1-5845-a74e-d00d82f34aac</td>\n      <td>S1A_IW_RAW__0SDV_20220509T025408_20220509T0254...</td>\n      <td>application/octet-stream</td>\n      <td>0</td>\n      <td>2022-05-09T05:25:11.127Z</td>\n      <td>2022-05-09T05:30:06.217Z</td>\n      <td>2022-05-09T05:30:06.217Z</td>\n      <td>True</td>\n      <td></td>\n      <td>/eodata/Sentinel-1/SAR/RAW/2022/05/09/S1A_IW_R...</td>\n      <td>[]</td>\n      <td>{'Start': '2022-05-09T02:54:08.531Z', 'End': '...</td>\n      <td>geography'SRID=4326;POLYGON ((45.9013 35.4175,...</td>\n      <td>{'type': 'Polygon', 'coordinates': [[[45.9013,...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n:::\n\nAlternatively to *contains*, *endswith* and *startswith* can be used, to search for products ending or starting with provided string.\n\n### Query by list\n\nIn case a user desires to search for multiple products by name in one query, POST method can be used:\n\n**POST**\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products/OData.CSC.FilterList`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products/OData.CSC.FilterList)\n\n**Request body**:\n```Json\n{\n  \"FilterProducts\":\n    [\n     {\"Name\": \"S1A_IW_GRDH_1SDV_20141031T161924_20141031T161949_003076_003856_634E.SAFE\"},\n     {\"Name\": \"S3B_SL_1_RBT____20190116T050535_20190116T050835_20190117T125958_0179_021_048_0000_LN2_O_NT_003.SEN3\"},\n     {\"Name\": \"xxxxxxxx.06.tar\"}\n    ]\n }\n```\nTwo results are returned, as there is no product named xxxxxxxx.06.tar.\n\n### Query Collection of Products\n\nTo search for products within a specific collection:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Collection/Name eq 'SENTINEL-2' and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T00:11:00.000Z`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Collection/Name%20eq%20%27SENTINEL-2%27%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T00:11:00.000Z)\n\nThe following collections are currently available:\n\n* SENTINEL-1\n* SENTINEL-2\n* SENTINEL-3\n* SENTINEL-5P\n\n### Query by Publication Date\n\nTo search for products published between two dates:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=PublicationDate gt 2019-05-15T00:00:00.000Z and PublicationDate lt 2019-05-16T00:00:00.000Z`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=PublicationDate%20gt%202019-05-15T00:00:00.000Z%20and%20PublicationDate%20lt%202019-05-16T00:00:00.000Z)\n\nTo define inclusive interval *ge* and *le* parameters can be used:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=PublicationDate ge 2019-05-15T00:00:00.000Z and PublicationDate le 2019-05-16T00:00:00.000Z`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=PublicationDate%20ge%202019-05-15T00:00:00.000Z%20and%20PublicationDate%20le%202019-05-16T00:00:00.000Z)\n\n### Query by Sensing Date\n\nTo search for products acquired between two dates:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=ContentDate/Start gt 2019-05-15T00:00:00.000Z and ContentDate/Start lt 2019-05-16T00:00:00.000Z`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=ContentDate/Start%20gt%202019-05-15T00:00:00.000Z%20and%20ContentDate/Start%20lt%202019-05-16T00:00:00.000Z)\n\nUsually, there are two parameters describing the ContentDate (Acquisition Dates) for a product - Start and End. Depending on what the user is looking for, these parameters can be mixed, e.g.:\n\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=ContentDate/Start gt 2019-05-15T00:00:00.000Z and ContentDate/End lt 2019-05-15T00:05:00.000Z](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=ContentDate/Start%20gt%202019-05-15T00:00:00.000Z%20and%20ContentDate/End%20lt%202019-05-15T00:05:00.000Z)\n\n### Query by Geographic Criteria\n\nTo search for products intersecting the specified polygon:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=OData.CSC.Intersects(area=geography'SRID=4326;POLYGON((12.655118166047592 47.44667197521409,21.39065656328509 48.347694733853245,28.334291357162826 41.877123516783655,17.47086198383573 40.35854475076158,12.655118166047592 47.44667197521409))') and ContentDate/Start gt 2022-05-20T00:00:00.000Z and ContentDate/Start lt 2022-05-21T00:00:00.000Z`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=OData.CSC.Intersects(area=geography%27SRID=4326;POLYGON((12.655118166047592%2047.44667197521409,21.39065656328509%2048.347694733853245,28.334291357162826%2041.877123516783655,17.47086198383573%2040.35854475076158,12.655118166047592%2047.44667197521409))%27)%20and%20ContentDate/Start%20gt%202022-05-20T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-21T00:00:00.000Z)\n\nTo search for products intersecting the specified point:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=OData.CSC.Intersects(area=geography%27SRID=4326;POINT(-0.5319577002158441%2028.65487836189358)%27)`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=OData.CSC.Intersects(area=geography%27SRID=4326;POINT(-0.5319577002158441%2028.65487836189358)%27))\n\n<u>Disclaimers</u>:\n\n1. MULTIPOLYGON is currently not supported.\n2. Polygon must start and end with the same point.\n3. Coordinates must be given in EPSG 4326\n\n### Query by attributes\n\nTo search for products by attributes it is necessary to build a filter with the following structure:\n```\nAttributes/OData.CSC.ValueTypeAttribute/any(att:att/Name eq '[Attribute.Name]' and att/OData.CSC.ValueTypeAttribute/Value eq '[Attribute.Value]')\n```\nwhere\n\n- *ValueTypeAttribute* can take the following values:\n  - *StringAttribute*\n  - *DoubleAttribute*\n  - *IntegerAttribute*\n  - *DateTimeOffsetAttribute*\n- *[Attribute.Name]* is the attribute name which can take multiple values, depending on collection (Attachment 1 - Coming soon)\n- *eq* before *[Attribute.Value]* can be substituted with le, lt, ge, gt in case of *Integer, Double* or *DateTimeOffset* Attributes\n- *[Attribute.Value]* is the specific value that the user is searching for\n\nTo get products with CloudCover\\<40% between two dates:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Attributes/OData.CSC.DoubleAttribute/any(att:att/Name eq 'cloudCover' and att/OData.CSC.DoubleAttribute/Value le 40.00) and ContentDate/Start gt 2022-01-01T00:00:00.000Z and ContentDate/Start lt 2022-01-03T00:00:00.000Z&$top=10`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Attributes/OData.CSC.DoubleAttribute/any(att:att/Name%20eq%20%27cloudCover%27%20and%20att/OData.CSC.DoubleAttribute/Value%20le%2040.00)%20and%20ContentDate/Start%20gt%202022-01-01T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-01-03T00:00:00.000Z&$top=10)\n\nTo get products with cloudCover\\< 10% and productType=S2MSI2A and ASCENDING orbitDirection between two dates:\n\n[`https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Attributes/OData.CSC.DoubleAttribute/any(att:att/Name eq 'cloudCover' and att/OData.CSC.DoubleAttribute/Value lt 10.00) and Attributes/OData.CSC.StringAttribute/any(att:att/Name eq 'productType' and att/OData.CSC.StringAttribute/Value eq 'S2MSI2A') and Attributes/OData.CSC.StringAttribute/any(att:att/Name eq 'orbitDirection' and att/OData.CSC.StringAttribute/Value eq 'ASCENDING') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T04:00:00.000Z&$top=10`](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=Attributes/OData.CSC.DoubleAttribute/any(att:att/Name%20eq%20%27cloudCover%27%20and%20att/OData.CSC.DoubleAttribute/Value%20lt%2010.00)%20and%20Attributes/OData.CSC.StringAttribute/any(att:att/Name%20eq%20%27productType%27%20and%20att/OData.CSC.StringAttribute/Value%20eq%20%27S2MSI2A%27)%20and%20Attributes/OData.CSC.StringAttribute/any(att:att/Name%20eq%20%27orbitDirection%27%20and%20att/OData.CSC.StringAttribute/Value%20eq%20%27ASCENDING%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T04:00:00.000Z&$top=10)\n\n\n### Orderby option\n\nOrderby option can be used to order the products in an ascending (asc) or descending (desc) direction. If asc or desc not specified, then the resources will be ordered in ascending order.\n\nTo order products by ContentDate/Start in a descending direction:\n\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,'S1A_EW_GRD') and ContentDate/Start gt 2022-05-03T00:00:00.000Z and ContentDate/Start lt 2022-05-03T03:00:00.000Z&$orderby=ContentDate/Start desc](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T03:00:00.000Z&$orderby=ContentDate/Start%20desc)\n\nBy default, if orderby option is not used, the results are not ordered. If orderby option is used, additional orderby by id is also used, so that the results are fully ordered and no products are lost while paginating through the results.\n\nThe acceptable arguments for this option: *ContentDate/Start*, *ContentDate/End, PublicationDate, ModificationDate*, in directions: *asc, desc*.\n\n### Top option\n\nTop option specifies the maximum number of items returned from a query.\n\nTo limit the number of results:\n\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$top=100](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$top=100)\n\n The default value is set to 20.\n\nThe acceptable arguments for this option: _Integer \\<0,1000\\>_\n\n## Skip option\n\nSkip option can be used to skip a specific number of results. Exemplary application of this option would be paginating through the results, however for performance reasons, we recommend limiting queries with small time intervals as a substitute of using skip in a more generic query.\n\nTo skip a specific number of results:\n\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$skip=23](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$skip=23)\n\n The default value is set to 0.\n\nWhenever a query results in more products than 20 (default top value), the API provides a nextLink at the bottom of the page:\n```\n\"@OData.nextLink\":\n```\n[http://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,'S1A_EW_GRD')+and+ContentDate/Start+gt+2022-05-03T00:00:00.000Z+and+ContentDate/Start+lt+2022-05-03T12:00:00.000Z&$skip=20](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)+and+ContentDate/Start+gt+2022-05-03T00:00:00.000Z+and+ContentDate/Start+lt+2022-05-03T12:00:00.000Z&$skip=20)\n\nThe acceptable arguments for this option: *Integer \\<0,10000\\>*\n\n## Count option\n\nCount option enables users to get the exact number of products matching the query. This option is disabled by default to accelerate the query performance.\n\nTo get the exact number of products for a given query:\n\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$count=True](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$count=True)\n\n The acceptable arguments for this option: *True, true, 1, False, false, 0*.\n\n## Expand option\n\nExpand option enables users to see full metadata of each returned result.\n\nTo see the metadata of the results:\n\n[https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$expand=Attributes](https://catalogue.dataspace.copernicus.eu/odata/v1/Products?$filter=contains(Name,%27S1A_EW_GRD%27)%20and%20ContentDate/Start%20gt%202022-05-03T00:00:00.000Z%20and%20ContentDate/Start%20lt%202022-05-03T12:00:00.000Z&$expand=Attributes)\n\n The acceptable arguments for this option: *Attributes*\n\n## Product Download\n\nFor downloading products you need an authorization token as only authorized users are allowed to download data products.\n\n\nTo get the token you can use the following scripts:\n\n```bash\ncurl --location --request POST 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=password' \\\n  --data-urlencode 'username=<LOGIN>' \\\n  --data-urlencode 'password=<PASSWORD>' \\\n  --data-urlencode 'client_id=cdse-public'\n```\n\nor\n```bash\n'-d 'password=' -d 'grant_type=password' 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' | python -m json.tool | grep \"access_token\" | awk -F\\\" '{print $4}')]]>\n```\n\nAlong with the Access Token you will be returned a Refresh Token, the latter is used to generate a new Access Token without the need to specify Username or Password, this helps to make requests less vulnerable to your credentials being exposed.\n\nTo re-generate the Access Token from the Refresh Token it can be done with the following request:\n\n```bash\ncurl --location --request POST 'https://identity.dataspace.copernicus.eu/auth/realms/CDSE/protocol/openid-connect/token' \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --data-urlencode 'grant_type=refresh_token' \\\n  --data-urlencode 'refresh_token=<REFRESH_TOKEN>' \\\n  --data-urlencode 'client_id=cdse-public'\n```\n\n\n<!--Where USER and PASSWORD are credentials to Your CloudFerro account in specific BRAND. Brand names are listed below with API from which You can get your token.\n\n| **Brand names** | **API** |\n| --- | --- |\n| dias | [https://identity.dataspace.copernicus.eu/auth/realms/dias/protocol/openid-connect/token](https://identity.cloudferro.com/auth/realms/dias) |\n| Creodias-new | [https://identity.dataspace.copernicus.eu/auth/realms/Creodias-new/protocol/openid-connect/token](https://identity.cloudferro.com/auth/realms/Creodias-new) |\n| CODE-DE-EL | [https://identity.dataspace.copernicus.eu/auth/realms/CODE-DE-EL/protocol/openid-connect/token](https://identity.cloudferro.com/auth/realms/CODE-DE-EL) |\n| wekeo-elasticity | [https://identity.dataspace.copernicus.eu/auth/realms/wekeo-elasticity/protocol/openid-connect/token](https://identity.cloudferro.com/auth/realms/wekeo-elasticity) |\n| Eumetsat-elasticity | [https://identity.dataspace.copernicus.eu/auth/realms/Eumetsat-elasticity/protocol/openid-connect/token](https://identity.cloudferro.com/auth/realms/Eumetsat-elasticity) | -->\n\n\n<br>\n\nOnce you have your token, you require a product Id which can be found in the response of the products search: [https://catalogue.dataspace.copernicus.eu/odata/v1/Products](https://catalogue.dataspace.copernicus.eu/odata/v1/Products)\n\n\nFinally, you can download the product using this script:\n```bash\ncurl -H \"Authorization: Bearer $KEYCLOAK_TOKEN\" 'https://catalogue.dataspace.copernicus.eu/odata/v1/Products(060882f4-0a34-5f14-8e25-6876e4470b0d)/$value' --output /tmp/product.zip\n```\nor\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n!wget  --header \"Authorization: Bearer $KEYCLOAK_TOKEN\" 'http://catalogue.dataspace.copernicus.eu/odata/v1/Products(db0c8ef3-8ec0-5185-a537-812dad3c58f8)/$value' -O example_odata.zip\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n'wget' is not recognized as an internal or external command,\noperable program or batch file.\n```\n:::\n:::\n\n\n",
    "supporting": [
      "OData_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}